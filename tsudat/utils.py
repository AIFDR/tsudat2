import os, sys, traceback
from subprocess import call

import simplejson as json

from tsudat.models import *
from tsudat.decorators import *

from geonode.maps.models import *
from geonode.maps.utils import *
from geonode.maps.views import *

from osgeo import gdal
from gdalconst import *
import osr

try:
    from notification import models as notification
except ImportError:
    notification = None

logger = logging.getLogger("tsudat2.tsudat.utils")

def process_finished_simulation(scenario):
    # Setup the new layers in the GeoNode

    elevation_files = [] 
    pds = ProjectDataSet.objects.filter(project=scenario.project).order_by('ranking')
    for ds in pds:
        elevation_files.append(ds.dataset.typename)
    srid = scenario.project.srid 

    keywords = []
    keywords.append('category:hazard')
    keywords.append('subcategory:tsunami')
    keywords.append('unit:m')
    keywords.append('source:tsudat')

    layer_perm_spec = {"anonymous":"_none","authenticated":"_none","users":[[scenario.project.user.username,"layer_readwrite"]]}
    output_layers = [] 
  
    payload = scenario.anuga_payload.replace("u'","'").replace("'", "\"")
    output_json = json.loads(payload)
 
    for result in output_json['results_max']:
        success = create_scenario_output_layer(result, scenario, srid, keywords, layer_perm_spec, output_layers)
        if(success):
            pass
        else:
            # Still broken after retrying 5x. Something really wrong, What do we do?
            print "Very broken"
            pass

    # Create a project Map in the GeoNode
    map_title = "%s Project Map" % (scenario.name)
    map_abstract = "This map shows the output layers for a simulation of a 1 in %d year tsunami that was generated by a magnitude %.1f earthquake on the %s subduction zone. The tsunami amplitude at the 100 m water depth contour was %.2f m and the tide height during the simulation was %.1f m. This simulation used a %s setup. Elevation data used in this tsunami simulation includes %s." % (scenario.return_period, scenario.event.magnitude, scenario.event.source_zone.name, scenario.wave_height, scenario.initial_tidal_stage, scenario.get_model_setup_display(), ", ".join(elevation_files))

    map_perm_spec = {"anonymous":"_none","authenticated":"_none","users":[[scenario.project.user.username,"map_readwrite"]]}
    map = Map()
    map.create_from_layer_list(scenario.project.user, output_layers, map_title, map_abstract)
    set_map_permissions(map, map_perm_spec)
    logger.debug("map saved")
    
    # Notify the User their job is finished
    if notification:
        data = {
            'map' : map,
            'siteurl': settings.SITEURL,
            'scenario_name': scenario.name,
        }
        #notification.send([user], "scenario_complete", data)
    logger.debug("notification sent")
            
    scenario.anuga_status = "DONE"
    scenario.tsudat_end_timestamp = datetime.datetime.now()
    scenario.map = map
    scenario.save()
    logger.debug("scenario saved")


# retry 3 times, with a 5 second delay, and a backoff of 2 seconds
@retry(3, delay=5, backoff=2)
def create_scenario_output_layer(layer_file, scenario, srid, keywords, layer_perm_spec, output_layers, elevation_files=""):
    try:
        (head, tail) = os.path.split(layer_file)
        (base, ext) = os.path.splitext(tail)
        tif_file_path = layer_file.replace('.asc', '.tif')
           
        layer_title = base 
        layer_abstract = "This layer shows the maximum ## from a 1 in %d year tsunami that was generated by a magnitude %.1f earthquake on the %s subduction zone. The tsunami amplitude at the 100 m water depth contour was %.2f m and the tide height during the simulation was %.1f m. This simulation used a %s setup. Elevation data used in this tsunami simulation includes %s." % (scenario.return_period, scenario.event.magnitude, scenario.event.source_zone.name, scenario.wave_height, scenario.initial_tidal_stage, scenario.get_model_setup_display(), ", ".join(elevation_files))

        # Warp to 4326 / Convert to TIF
        if(os.path.exists(tif_file_path)):
            pass
        else:
            # Switch to using python bindings here, or at least use subprocess module to handle for errors
            cmd = "/usr/bin/gdalwarp -of GTiff -s_srs EPSG:%d -t_srs EPSG:4326 %s %s" % (srid, layer_file, tif_file_path)
            try:
                retcode = call(cmd, shell=True)
                if retcode < 0:
                    print >>sys.stderr, "Child was terminated by signal", -retcode
                else:
                    print >>sys.stderr, "Child returned", retcode
            except OSError, e:
                print >>sys.stderr, "Execution failed:", e
 
        new_layer = save(base, tif_file_path, scenario.project.user, overwrite = True, title=layer_title, abstract=layer_abstract, permissions=layer_perm_spec, keywords = keywords)
        sl = ScenarioLayer()
        sl.scenario = scenario
        sl.layer = new_layer
        style_name = None
        # Set the proper default style
        if(new_layer.typename.find('velocity') != -1):
                style_name = "flow_speed"
                new_layer.abstract = layer_abstract.replace("##", "flow velocity")
                sl.type = ScenarioOutputLayer.objects.get(name="velocity")
        elif(new_layer.typename.find('stage') != -1):
                style_name = "flow_stage"
                new_layer.abstract = layer_abstract.replace("##", "wave amplitude")
                sl.type = ScenarioOutputLayer.objects.get(name="stage")
        elif(new_layer.typename.find('depth') != -1):
                style_name = "flow_depth"
                new_layer.abstract = layer_abstract.replace("##", "flow depth")
                sl.type = ScenarioOutputLayer.objects.get(name="depth")
        if(style_name):
                keywords.append('source:%s' % style_name) 
        new_layer.keywords = " ".join(keywords)
        cat = Layer.objects.gs_catalog
        publishing = cat.get_layer(new_layer.name)
        logger.debug("publishing=%s" % str(publishing))
        style = cat.get_style(style_name)
        logger.debug("style=%s" %  str(style))
        publishing.default_style = style 
        cat.save(publishing)
        logger.debug("publishing saved")
 
        new_layer.save()
        logger.debug("layer saved %s" % new_layer.typename)

        sl.save()
        logger.debug("scenario layer saved %s" % new_layer.typename)
        output_layers.append(new_layer.typename)
        logger.debug("output_layer saved %s" % output_layers)

        return True
    except: # Catch specific exceptions?
        error = sys.exc_info()
        print '-'*60
        traceback.print_exc(file=sys.stdout)
        print '-'*60 
        return False
